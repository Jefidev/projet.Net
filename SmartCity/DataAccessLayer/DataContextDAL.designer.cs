#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SmartCity")]
	public partial class DataContextDALDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDEFAUT(DEFAUT instance);
    partial void UpdateDEFAUT(DEFAUT instance);
    partial void DeleteDEFAUT(DEFAUT instance);
    partial void InsertINTERVENTION(INTERVENTION instance);
    partial void UpdateINTERVENTION(INTERVENTION instance);
    partial void DeleteINTERVENTION(INTERVENTION instance);
    partial void InsertPERSONNE(PERSONNE instance);
    partial void UpdatePERSONNE(PERSONNE instance);
    partial void DeletePERSONNE(PERSONNE instance);
    #endregion
		
		public DataContextDALDataContext() : 
				base(global::DataAccessLayer.Properties.Settings.Default.SmartCityConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataContextDALDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContextDALDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContextDALDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContextDALDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DEFAUT> DEFAUTs
		{
			get
			{
				return this.GetTable<DEFAUT>();
			}
		}
		
		public System.Data.Linq.Table<INTERVENTION> INTERVENTIONs
		{
			get
			{
				return this.GetTable<INTERVENTION>();
			}
		}
		
		public System.Data.Linq.Table<PERSONNE> PERSONNEs
		{
			get
			{
				return this.GetTable<PERSONNE>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DEFAUTS")]
	public partial class DEFAUT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdDefaut;
		
		private string _Photo;
		
		private string _Description;
		
		private string _Position;
		
		private EntitySet<INTERVENTION> _INTERVENTIONs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdDefautChanging(int value);
    partial void OnIdDefautChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    #endregion
		
		public DEFAUT()
		{
			this._INTERVENTIONs = new EntitySet<INTERVENTION>(new Action<INTERVENTION>(this.attach_INTERVENTIONs), new Action<INTERVENTION>(this.detach_INTERVENTIONs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDefaut", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdDefaut
		{
			get
			{
				return this._IdDefaut;
			}
			set
			{
				if ((this._IdDefaut != value))
				{
					this.OnIdDefautChanging(value);
					this.SendPropertyChanging();
					this._IdDefaut = value;
					this.SendPropertyChanged("IdDefaut");
					this.OnIdDefautChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="VarChar(50)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="VarChar(40)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DEFAUT_INTERVENTION", Storage="_INTERVENTIONs", ThisKey="IdDefaut", OtherKey="Defaut")]
		public EntitySet<INTERVENTION> INTERVENTIONs
		{
			get
			{
				return this._INTERVENTIONs;
			}
			set
			{
				this._INTERVENTIONs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_INTERVENTIONs(INTERVENTION entity)
		{
			this.SendPropertyChanging();
			entity.DEFAUT1 = this;
		}
		
		private void detach_INTERVENTIONs(INTERVENTION entity)
		{
			this.SendPropertyChanging();
			entity.DEFAUT1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.INTERVENTIONS")]
	public partial class INTERVENTION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdIntervention;
		
		private string _Etat;
		
		private string _Commentaire;
		
		private System.Nullable<System.DateTime> _DateIntervention;
		
		private System.Nullable<int> _Defaut;
		
		private string _Personne;
		
		private EntityRef<DEFAUT> _DEFAUT1;
		
		private EntityRef<PERSONNE> _PERSONNE1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdInterventionChanging(int value);
    partial void OnIdInterventionChanged();
    partial void OnEtatChanging(string value);
    partial void OnEtatChanged();
    partial void OnCommentaireChanging(string value);
    partial void OnCommentaireChanged();
    partial void OnDateInterventionChanging(System.Nullable<System.DateTime> value);
    partial void OnDateInterventionChanged();
    partial void OnDefautChanging(System.Nullable<int> value);
    partial void OnDefautChanged();
    partial void OnPersonneChanging(string value);
    partial void OnPersonneChanged();
    #endregion
		
		public INTERVENTION()
		{
			this._DEFAUT1 = default(EntityRef<DEFAUT>);
			this._PERSONNE1 = default(EntityRef<PERSONNE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdIntervention", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdIntervention
		{
			get
			{
				return this._IdIntervention;
			}
			set
			{
				if ((this._IdIntervention != value))
				{
					this.OnIdInterventionChanging(value);
					this.SendPropertyChanging();
					this._IdIntervention = value;
					this.SendPropertyChanged("IdIntervention");
					this.OnIdInterventionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Etat", DbType="VarChar(20)")]
		public string Etat
		{
			get
			{
				return this._Etat;
			}
			set
			{
				if ((this._Etat != value))
				{
					this.OnEtatChanging(value);
					this.SendPropertyChanging();
					this._Etat = value;
					this.SendPropertyChanged("Etat");
					this.OnEtatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Commentaire", DbType="VarChar(500)")]
		public string Commentaire
		{
			get
			{
				return this._Commentaire;
			}
			set
			{
				if ((this._Commentaire != value))
				{
					this.OnCommentaireChanging(value);
					this.SendPropertyChanging();
					this._Commentaire = value;
					this.SendPropertyChanged("Commentaire");
					this.OnCommentaireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateIntervention", DbType="Date")]
		public System.Nullable<System.DateTime> DateIntervention
		{
			get
			{
				return this._DateIntervention;
			}
			set
			{
				if ((this._DateIntervention != value))
				{
					this.OnDateInterventionChanging(value);
					this.SendPropertyChanging();
					this._DateIntervention = value;
					this.SendPropertyChanged("DateIntervention");
					this.OnDateInterventionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Defaut", DbType="Int")]
		public System.Nullable<int> Defaut
		{
			get
			{
				return this._Defaut;
			}
			set
			{
				if ((this._Defaut != value))
				{
					if (this._DEFAUT1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDefautChanging(value);
					this.SendPropertyChanging();
					this._Defaut = value;
					this.SendPropertyChanged("Defaut");
					this.OnDefautChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Personne", DbType="VarChar(50)")]
		public string Personne
		{
			get
			{
				return this._Personne;
			}
			set
			{
				if ((this._Personne != value))
				{
					if (this._PERSONNE1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonneChanging(value);
					this.SendPropertyChanging();
					this._Personne = value;
					this.SendPropertyChanged("Personne");
					this.OnPersonneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DEFAUT_INTERVENTION", Storage="_DEFAUT1", ThisKey="Defaut", OtherKey="IdDefaut", IsForeignKey=true)]
		public DEFAUT DEFAUT1
		{
			get
			{
				return this._DEFAUT1.Entity;
			}
			set
			{
				DEFAUT previousValue = this._DEFAUT1.Entity;
				if (((previousValue != value) 
							|| (this._DEFAUT1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DEFAUT1.Entity = null;
						previousValue.INTERVENTIONs.Remove(this);
					}
					this._DEFAUT1.Entity = value;
					if ((value != null))
					{
						value.INTERVENTIONs.Add(this);
						this._Defaut = value.IdDefaut;
					}
					else
					{
						this._Defaut = default(Nullable<int>);
					}
					this.SendPropertyChanged("DEFAUT1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PERSONNE_INTERVENTION", Storage="_PERSONNE1", ThisKey="Personne", OtherKey="Mail", IsForeignKey=true)]
		public PERSONNE PERSONNE1
		{
			get
			{
				return this._PERSONNE1.Entity;
			}
			set
			{
				PERSONNE previousValue = this._PERSONNE1.Entity;
				if (((previousValue != value) 
							|| (this._PERSONNE1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PERSONNE1.Entity = null;
						previousValue.INTERVENTIONs.Remove(this);
					}
					this._PERSONNE1.Entity = value;
					if ((value != null))
					{
						value.INTERVENTIONs.Add(this);
						this._Personne = value.Mail;
					}
					else
					{
						this._Personne = default(string);
					}
					this.SendPropertyChanged("PERSONNE1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PERSONNES")]
	public partial class PERSONNE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Mail;
		
		private string _Password;
		
		private string _Nom;
		
		private string _Prenom;
		
		private string _Type;
		
		private EntitySet<INTERVENTION> _INTERVENTIONs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMailChanging(string value);
    partial void OnMailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnPrenomChanging(string value);
    partial void OnPrenomChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public PERSONNE()
		{
			this._INTERVENTIONs = new EntitySet<INTERVENTION>(new Action<INTERVENTION>(this.attach_INTERVENTIONs), new Action<INTERVENTION>(this.detach_INTERVENTIONs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mail", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Mail
		{
			get
			{
				return this._Mail;
			}
			set
			{
				if ((this._Mail != value))
				{
					this.OnMailChanging(value);
					this.SendPropertyChanging();
					this._Mail = value;
					this.SendPropertyChanged("Mail");
					this.OnMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(20)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(30)")]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prenom", DbType="VarChar(30)")]
		public string Prenom
		{
			get
			{
				return this._Prenom;
			}
			set
			{
				if ((this._Prenom != value))
				{
					this.OnPrenomChanging(value);
					this.SendPropertyChanging();
					this._Prenom = value;
					this.SendPropertyChanged("Prenom");
					this.OnPrenomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(10)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PERSONNE_INTERVENTION", Storage="_INTERVENTIONs", ThisKey="Mail", OtherKey="Personne")]
		public EntitySet<INTERVENTION> INTERVENTIONs
		{
			get
			{
				return this._INTERVENTIONs;
			}
			set
			{
				this._INTERVENTIONs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_INTERVENTIONs(INTERVENTION entity)
		{
			this.SendPropertyChanging();
			entity.PERSONNE1 = this;
		}
		
		private void detach_INTERVENTIONs(INTERVENTION entity)
		{
			this.SendPropertyChanging();
			entity.PERSONNE1 = null;
		}
	}
}
#pragma warning restore 1591
